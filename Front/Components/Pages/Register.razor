@page "/Register"
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject RegisterService RegisterService
@inject AuthenticationStateProvider authStateProvider
@using Front.Entities
<EditForm Model="@registerModel" OnValidSubmit="HandleRegister">
    <DataAnnotationsValidator />
    

    <label for="Name">UserName</label>
    <InputText @bind-Value="registerModel.Name" id="Name" />
    <div class="error-message">
    <!--<ValidationMessage For="@(() => registerModel.Name)" />!-->
    </div>

    <label for="Pass">password</label>
    <InputText @bind-Value="registerModel.Pass" type="password" id="Pass" />
    <div class="error-message">
    
    </div>

    <label for="Email">E-mail:</label>
    <InputText @bind-Value="registerModel.Email" type="email" id="Email" />
    <div class="error-message">
    </div>

    <ValidationSummary />

    <button type="submit">Register</button>
</EditForm>

@code {
    private RegisterModel registerModel = new RegisterModel();


    private async void HandleRegister()
    {
        var user = await RegisterService.RegisterUser(registerModel.Name, registerModel.Pass , registerModel.Email);
        if (user != null)
        {
            
            NavigationManager.NavigateTo("/register_success");
        }
        else
        {
            NavigationManager.NavigateTo("/register_faild");
        }
    }

    private class RegisterModel
    {
         [Alphanumeric(ErrorMessage = "Username doit être alphanumérique.")]
        public string Name { get; set; } = "";

        [Alphanumeric(ErrorMessage = "Password doit être alphanumérique.")]
        public string Pass { get; set; } = "";

        [EmailAddress(ErrorMessage = "E-mail n'est pas valide.")]
        public string Email { get; set; } = "";
    }
}