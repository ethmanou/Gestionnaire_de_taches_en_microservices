<!-- TaskList.razor -->
@page "/ALLTasks"
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider authStateProvider
@using Front.Entities
@inject TaskService TaskService
@inherits Microsoft.AspNetCore.Components.ComponentBase
@inject IJSRuntime JSRuntime


<h3>Liste des tâches</h3>




<table class="table">
    <thead>
        <tr>
            <th>IDUser</th>
            <th>Description</th>
            <th>Validation</th>
        </tr>
    </thead>
    <tbody>
        @if (tasks != null)
        {
            var index = 0;
            @foreach (var task in tasks)
            {
                var currentIndex = index; 
                
                <tr>
                    
                    @if(table_updated[index])
                    {
                        <td>@task.IdUser</td>
                        <td>@task?.Text</td>
                        <td>
                            @if (task.IsDone)
                            {
                                <span class="text-success">
                                    <i class="bi bi-check-circle">done</i>
                                </span>
                            }
                            else
                            {
                                <span class="text-warning">
                                    <i class="bi bi-exclamation-circle">not done</i>
                                </span>
                            }
                        </td>
                        <td style="color: @GetTimeColor(task.DeadLine)" > @GetTimeRemainingString(task.DeadLine - DateTime.Now , task)</td>
                    }
                    else{
                    <td>
                        <input @bind="@task.IdUser" disabled="@table_updated[index]" />
                        <input @bind="@task.Text" disabled="@table_updated[index]" />
                        <InputCheckbox @bind-Value="task.IsDone" disabled = "@table_updated[index]" />
                        <input type="text" @bind="dateString" placeholder="yyyy-MM-dd HH:mm" />
                    </td>
                    }
                    <td>
                        @if (!table_updated[index])
                        {
                            <button @onclick="(() => HandleSave(task , currentIndex))">save </button>
                        }
                        else{
                            <button @onclick="(() => HandleUpdate(currentIndex))">Met à jour </button>
                            <button @onclick="(() => ShowOptionDelete(currentIndex))">Delete</button>
                        }
                        @if (table_deleted[index])
                            {
                                <div>
                                    <p>Voulez-vous vraiment supprimer cette tâche?</p>
                                    <button @onclick="(() => HandleDelete(task.Id))">Oui</button>
                                    <button @onclick="(() => CancelDelete(currentIndex))">Annuler</button>
                                </div>
                            }
                        
                    </td>
                </tr>
                index++;
            }
        }
        else
        {
            <tr>
                <td colspan="3">Aucune tâche disponible pour le moment.</td>
            </tr>
        }
    </tbody>
</table>

@code {
    private bool[] table_deleted;
    private bool[] table_updated;

    private List<TaskModel>? tasks;
    private System.Timers.Timer updateTimer;
    private string dateString = "" ;

    protected override async Task OnInitializedAsync()
    {
        var authState = await authStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (!user.Identity.IsAuthenticated || !user.IsInRole("admin"))
        {
            // L'utilisateur n'est pas authentifié ou n'a pas le rôle requis, rediriger vers la page de connexion ou une autre page.
            NavigationManager.NavigateTo("/login");
            return;
        }

        tasks = await TaskService.GetAllTasksAsync();
        if(tasks != null){
            table_updated = new bool[tasks.Count+1] ;
            for(int i=0 ; i<tasks.Count ; i++){
                table_updated[i] = true;
            }
            table_deleted = new bool[tasks.Count+1] ;
            for(int i=0 ; i<tasks.Count ; i++){
                table_deleted[i] = false;
            }
        }

        updateTimer = new System.Timers.Timer(1000);
        updateTimer.Elapsed += async (sender, e) => await OnUpdateTimerElapsed();
        updateTimer.AutoReset = true;
        updateTimer.Start();
        
    }


    private void ShowOptionDelete(int indx)
        {
            table_deleted[indx] = true;
        }

    private void CancelDelete(int indx)
        {
            table_deleted[indx] = false;
        }


    
    private async Task HandleDelete(int id)
    {
        
        var resultat = await TaskService.DeleteTaskAsyncAdmin(id);
        await OnInitializedAsync();

        

    }

    private async Task HandleUpdate(int indx){
        table_updated[indx] = false;
    }
    private async Task HandleSave(TaskModel task , int indx){
        if (DateTime.TryParse(dateString, out DateTime result))
        {
            var resultat = await TaskService.UpdateTaskAsyncAdmin(task.Id , task.Text , task.IsDone, task.IdUser , result);
        }
        
        table_updated[indx] = true;
        await OnInitializedAsync();
    }









    public static string GetTimeRemainingString(TimeSpan difference , TaskModel task)
    {
        string result = "";

        if(!task.IsDone){
            if (difference.TotalSeconds < 0)
            {
                result = $"en retard de : {-(int)difference.TotalDays} jours, {-difference.Hours} heures, {-difference.Minutes} minutes, {-difference.Seconds} secondes";
            }
            else
            {
                result = $"{(int)difference.TotalDays} jours, {difference.Hours} heures, {difference.Minutes} minutes, {difference.Seconds} secondes";
            }
        }

        else{
            if(task.DoneDate.HasValue){
                TimeSpan difference1 = (TimeSpan)(task.DeadLine - task.DoneDate) ;
                if(difference1.TotalSeconds < 0){
                    result = $"fait en retard de :  {-(int)difference1.TotalDays} jours, {-difference1.Hours} heures, {-difference1.Minutes} minutes, {-difference1.Seconds} secondes";
                }
                else{
                    result = $"bravo c'est fait en avance :  {(int)difference1.TotalDays} jours, {difference1.Hours} heures, {difference1.Minutes} minutes, {difference1.Seconds} secondes";
                }
            }
            
        }
        

        

        return result;
    }


    private async Task OnUpdateTimerElapsed()
    {
        
        await InvokeAsync(() => StateHasChanged());
    }

    private string GetTimeColor(DateTime deadline) {
        TimeSpan difference = deadline - DateTime.Now;

        if (difference.TotalSeconds < 0) {
            // La DeadLine est dépassée
            return "red";
        } else if (difference.TotalDays < 1) {
            // Moins d'un jour restant
            return "orange";
        } else {
            // Plus d'un jour restant
            return "green";
        }
    }
}


