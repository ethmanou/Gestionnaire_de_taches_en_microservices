<!-- TaskList.razor -->
@page "/Create_task"
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider authStateProvider
@using Front.Entities
@inject TaskService TaskService

<EditForm Model="@task" OnValidSubmit="HandleCreate">
    <h2> &nbsp;</h2>
    <label for="Description">Description</label>
    <InputText @bind-Value="task.Text" />
    <label for="istaskDone">Is Done:</label>
    <InputCheckbox id="isTaskDone" @bind-Value="task.IsDone" />
    <label for="DeadLine">DeadLine:</label>
    <input type="datetime-local" @bind="task.DeadLine" />
    <button type="submit">Create</button>
</EditForm>

<AuthorizeView Context="Auth" Roles="admin">
    <Authorized>
        <EditForm Model="@task" OnValidSubmit="HandleCreateAdmin">
            <h2>&nbsp;</h2>
            <h3>Créer une tache pour autre utilisateur</h3>
            <h2>&nbsp;</h2>
            <label for="idUser">IdUser</label>
            <input @bind="@taskA.IdUser" />
            <label for="Text">Description</label>
            <InputText @bind-Value="taskA.Text" />
            <label for="istaskDone">Is Done:</label>
            <InputCheckbox id="isTaskADone" @bind-Value="taskA.IsDone" />
            <label for="DeadLine">DeadLine:</label>
            <input type="datetime-local" @bind="task.DeadLine" />
            <button type="submit">Create</button>
        </EditForm>
    </Authorized>
    <NotAuthorized>
    </NotAuthorized>
</AuthorizeView>




@code {
    
    private TaskCreate task = new TaskCreate{ DeadLine = DateTime.Now };

    //task pour le cas ou Admin veux creer une tache pour un autre user
    private TaskCreate taskA = new TaskCreate{ DeadLine = DateTime.Now };

    protected override async Task OnInitializedAsync(){
        var authState = await authStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (!user.Identity.IsAuthenticated)
        {
            // L'utilisateur n'est pas authentifié ou n'a pas le rôle requis, rediriger vers la page de connexion ou une autre page.
            NavigationManager.NavigateTo("/login");
            return;
        }
    }



    private async void HandleCreate()
    {
        
        var user = await TaskService.CreateTask(task.Text , task.IsDone , task.DeadLine);
            if (user != null)
            {
                NavigationManager.NavigateTo("/Task_visual");
            }
    }

    private async void HandleCreateAdmin()
    {
        
        var user = await TaskService.CreateTaskForUserByAdmin(taskA.Text , taskA.IsDone , (int)taskA.IdUser , task.DeadLine);
            if (user != null)
            {
                NavigationManager.NavigateTo("/Task_visual");
            }
    }

    public class TaskCreate
    {
        public string Text { get; set; }
        public bool IsDone { get; set; }
        public int? IdUser {get ; set ;}
        public DateTime DeadLine { get; set; }
    }

}


