@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider authStateProvider
@inject IJSRuntime JSRuntime
@inject KonamiService KonamiService

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            <AuthorizeView>
                <Authorized>
                    <p>Hello, @context.User.Identity.Name !</p>
                    <a @onclick="Logout">Logout</a>
                </Authorized>
                <NotAuthorized>
                    <p>You're not connected.</p>
                </NotAuthorized>
            </AuthorizeView>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

<div tabindex="0" @onkeydown="HandleKeyDown" @onblur="HandleBlur"></div>

@code {
    private string keyBuffer = "";

    protected override void OnInitialized()
    {
        KonamiService.KonamiCodeCompleted += HandleKonamiCodeCompleted;
    }

    private void HandleKonamiCodeCompleted()
    {
        Console.WriteLine("Konami Code réussi !");
    }

    private void HandleKeyDown(KeyboardEventArgs e)
    {
        keyBuffer += e.Key;

        if (keyBuffer.Length > KonamiService.konamiCode.Count)
        {
            keyBuffer = keyBuffer.Substring(1);
        }

        if (keyBuffer == string.Join("", KonamiService.konamiCode))
        {
            HandleKonamiCodeCompleted();
            keyBuffer = "";
        }
    }

    private void HandleBlur(FocusEventArgs e)
    {
        keyBuffer = "";
    }

    private async void Logout()
    {
        await ((CustomAuthenticationStateProvider)authStateProvider).Logout();
        NavigationManager.NavigateTo("/login");
    }
}
